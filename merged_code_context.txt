--- START OF FILE merged_code_context.txt ---



============================================================
FILE: next.config.ts
============================================================

import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  images: {
    // remotePatterns 대신 domains를 사용합니다.
    // 여기에 Step 1에서 복사한 정확한 호스트 이름을 붙여넣으세요.
    domains: ['pub-36efcebb6f624798b7169d496005c244.r2.dev'], 
  },
};

export default nextConfig;



============================================================
FILE: package.json
============================================================

{
  "name": "private-media-sharer",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.901.0",
    "@aws-sdk/s3-request-presigner": "^3.901.0",
    "@vercel/postgres": "^0.10.0",
    "bcrypt": "^6.0.0",
    "fast-average-color": "^9.5.0",
    "lucide-react": "^0.544.0",
    "nanoid": "^5.1.6",
    "next": "15.5.4",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-markdown": "^10.1.0",
    "rehype-raw": "^7.0.0",
    "remark-breaks": "^4.0.0",
    "remark-gfm": "^4.0.1",
    "satori": "^0.18.3",
    "sharp": "^0.34.4"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.14",
    "@tailwindcss/typography": "^0.5.19",
    "@types/bcrypt": "^6.0.0",
    "@types/node": "^20.19.19",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "dotenv": "^17.2.3",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}



============================================================
FILE: tailwind.config.ts
============================================================

// tailwind.config.ts

import type { Config } from 'tailwindcss';
import colors from 'tailwindcss/colors'; // tailwindcss colors import

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    // ▼▼▼ extend 대신 colors를 직접 정의하여 덮어씁니다 ▼▼▼
    colors: {
      transparent: 'transparent',
      current: 'currentColor',
      black: colors.black,
      white: colors.white,
      gray: colors.gray,
      // 에러 메시지 등을 위해 red 색상은 유지합니다.
      red: colors.red,
    },
    // ▲▲▲ 여기까지 수정 ▲▲▲
    extend: {
      fontFamily: {
        pretendard: ['Pretendard', 'sans-serif'],
        bookkmyungjo: ['BookkMyungjo', 'serif'],
        freesentation: ['Freesentation', 'sans-serif'],
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
};
export default config;


============================================================
FILE: app/globals.css
============================================================

/* app/globals.css */

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Thin.woff') format('woff');
    font-weight: 100;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-ExtraLight.woff') format('woff');
    font-weight: 200;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Light.woff') format('woff');
    font-weight: 300;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Regular.woff') format('woff');
    font-weight: 400;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Medium.woff') format('woff');
    font-weight: 500;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-SemiBold.woff') format('woff');
    font-weight: 600;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Bold.woff') format('woff');
    font-weight: 700;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-ExtraBold.woff') format('woff');
    font-weight: 800;
    font-display: swap;
}

@font-face {
    font-family: 'Pretendard';
    src: url('https://cdn.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Black.woff') format('woff');
    font-weight: 900;
    font-display: swap;
}

@font-face {
    font-family: 'BookkMyungjo';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2302@1.0/BookkMyungjo-Lt.woff2') format('woff2');
    font-weight: 400;
    font-display: swap;
}

@font-face {
    font-family: 'BookkMyungjo';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2302@1.0/BookkMyungjo-Bd.woff2') format('woff2');
    font-weight: 700;
    font-display: swap;
}

/* ▼▼▼ 'Presentation' -> 'Freesentation' 으로 수정 ▼▼▼ */
@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-1Thin.woff2') format('woff2');
    font-weight: 100;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-2ExtraLight.woff2') format('woff2');
    font-weight: 200;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-3Light.woff2') format('woff2');
    font-weight: 300;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-4Regular.woff2') format('woff2');
    font-weight: 400;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-5Medium.woff2') format('woff2');
    font-weight: 500;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-6SemiBold.woff2') format('woff2');
    font-weight: 600;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-7Bold.woff2') format('woff2');
    font-weight: 700;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-8ExtraBold.woff2') format('woff2');
    font-weight: 800;
    font-display: swap;
}

@font-face {
    font-family: 'Freesentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-9Black.woff2') format('woff2');
    font-weight: 900;
    font-display: swap;
}
/* ▲▲▲ 여기까지 수정 ▲▲▲ */

@tailwind base;
@tailwind components;
@tailwind utilities;


.spoiler {
  color: #6d6d6d;
  filter: blur(5px);
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  user-select: none; 
}

.spoiler-revealed {
  color: inherit;
  filter: blur(0);
  cursor: default;
  user-select: auto;
}


============================================================
FILE: app/layout.tsx
============================================================

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}



============================================================
FILE: app/upload/page.tsx
============================================================

'use client';

import { useState, ChangeEvent, FormEvent, useRef } from 'react';
import OgPreview from './OgPreview';
import ContentPreview from './ContentPreview';

// ▼▼▼ 정규표현식에서 특수문자를 이스케이프하는 헬퍼 함수 ▼▼▼
function escapeRegExp(string: string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $&는 일치한 전체 문자열을 의미합니다.
}

export default function UploadPage() {
  // ... (기존 state 선언은 변경 없음) ...
  const [title, setTitle] = useState('');
  const [tags, setTags] = useState('');
  const [content, setContent] = useState('');
  const [thumbnailUrl, setThumbnailUrl] = useState<string>('');
  const [isThumbnailUploading, setIsThumbnailUploading] = useState(false);
  const [isBlurred, setIsBlurred] = useState(false);
  const [isSpoiler, setIsSpoiler] = useState(false);
  const [isNsfw, setIsNsfw] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [generatedLink, setGeneratedLink] = useState('');
  const [error, setError] = useState('');
  const [selectedFont, setSelectedFont] = useState('font-pretendard');
  const [password, setPassword] = useState('');
  const contentRef = useRef<HTMLTextAreaElement>(null);

  const fontClasses: { [key: string]: string } = {
    'font-pretendard': '프리텐다드 (고딕)',
    'font-bookkmyungjo': '북크 명조',
    'font-freesentation': '프리젠테이션 (고딕)',
  };

  // ... (handleThumbnailUpload, handleFileChange, handleSubmit, insertSpoilerText 함수는 변경 없음) ...
  const handleThumbnailUpload = async (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    setIsThumbnailUploading(true);
    setError('');
    const formData = new FormData();
    formData.append('file', file);
    try {
      const response = await fetch('/api/upload', { method: 'POST', body: formData });
      const data = await response.json();
      if (!response.ok) throw new Error(data.error);
      setThumbnailUrl(data.url);
    } catch (err) {
      setError(err instanceof Error ? err.message : '대표 이미지 업로드 실패');
    } finally {
      setIsThumbnailUploading(false);
    }
  };

  const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;
    setIsUploading(true);
    setError('');
    for (const file of Array.from(files)) {
      const formData = new FormData();
      formData.append('file', file);
      try {
        const response = await fetch('/api/upload', { method: 'POST', body: formData });
        const data = await response.json();
        if (!response.ok) throw new Error(data.error);
        setContent(prev => `${prev}\n\n![${data.filename}](${data.url})`);
      } catch (err) {
        setError(err instanceof Error ? err.message : '파일 업로드 실패');
      }
    }
    setIsUploading(false);
  };

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!title || !content || !thumbnailUrl) {
      setError('제목, 내용, 대표 이미지를 모두 설정해주세요.');
      return;
    }
    setIsSubmitting(true);
    setError('');
    setGeneratedLink('');

    try {
      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          title, tags, content, thumbnailUrl,
          isThumbnailBlurred: isBlurred,
          isContentSpoiler: isSpoiler,
          isNsfw, selectedFont, password,
        }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      setGeneratedLink(data.url);
      setTitle(''); setTags(''); setContent(''); setThumbnailUrl('');
      setIsBlurred(false); setIsSpoiler(false); setIsNsfw(false); setPassword('');
    } catch (err) {
      setError(err instanceof Error ? err.message : '게시물 생성 실패');
    } finally {
      setIsSubmitting(false);
    }
  };

  const insertSpoilerText = () => {
    const textarea = contentRef.current;
    if (!textarea) return;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = content.substring(start, end);
    const spoilerText = `블러[${selectedText || '가릴 내용'}]`;
    const newContent = content.substring(0, start) + spoilerText + content.substring(end);
    setContent(newContent);
    textarea.focus();
    setTimeout(() => {
      const newCursorPosition = start + spoilerText.length - (selectedText ? 1 : 6);
      textarea.setSelectionRange(newCursorPosition, newCursorPosition);
    }, 0);
  };

  // ▼▼▼ 이미지 리사이즈 시 content 문자열을 업데이트하는 핸들러 ▼▼▼
  const handleImageResize = (src: string, newWidth: number) => {
    setContent(currentContent => {
      const escapedSrc = escapeRegExp(src);
      
      // 1. 이미 HTML <img> 태그인지 확인하고 업데이트
      const htmlImgRegex = new RegExp(`<img[^>]*src="(${escapedSrc})"[^>]*>`, 'i');
      if (htmlImgRegex.test(currentContent)) {
        return currentContent.replace(htmlImgRegex, (match) => {
          if (/width="/i.test(match)) {
            // width 속성이 있으면 교체
            return match.replace(/width="\d+"/i, `width="${newWidth}"`);
          } else {
            // width 속성이 없으면 추가
            return match.replace(/<img/i, `<img width="${newWidth}"`);
          }
        });
      }

      // 2. 마크다운 구문 `![alt](src)`를 HTML `<img>` 태그로 교체
      const markdownImgRegex = new RegExp(`!\\[([^\\]]*)\\]\\((${escapedSrc})\\)`, 'g');
      if (markdownImgRegex.test(currentContent)) {
        return currentContent.replace(markdownImgRegex, `<img alt="$1" src="${src}" width="${newWidth}" />`);
      }

      // 일치하는 이미지가 없으면 원본 content 반환
      return currentContent;
    });
  };
  // ▲▲▲ 여기까지 추가 ▲▲▲

  return (
    <main className={`min-h-screen bg-gray-100 p-4 sm:p-8 ${selectedFont}`}>
      <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8">
        
        {/* --- 왼쪽: 작성 폼 --- */}
        <div className="bg-white p-8 rounded-lg shadow-md space-y-6 h-fit">
          {/* ... (폼 내용은 변경 없음) ... */}
          <h1 className="text-3xl font-bold text-center text-gray-900">새 게시물 작성</h1>
          
          <div>
            <label htmlFor="font-select" className="block text-sm font-medium text-gray-700">폰트 선택</label>
            <select id="font-select" value={selectedFont} onChange={(e) => setSelectedFont(e.target.value)} className="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500 sm:text-sm">
              {Object.entries(fontClasses).map(([className, name]) => ( <option key={className} value={className}>{name}</option>))}
            </select>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div><label htmlFor="title" className="block text-sm font-medium text-gray-700">제목</label><input id="title" type="text" value={title} onChange={(e) => setTitle(e.target.value)} className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500" required /></div>
            
            <div>
              <label htmlFor="tags" className="block text-sm font-medium text-gray-700">태그</label>
              <input id="tags" type="text" value={tags} onChange={(e) => setTags(e.target.value)} className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500" placeholder="태그를 쉼표(,)로 구분하여 입력" />
            </div>

            <div>
              <label htmlFor="thumbnail-upload" className="block text-sm font-medium text-gray-700">대표 이미지</label>
              <input id="thumbnail-upload" type="file" accept="image/*" onChange={handleThumbnailUpload} disabled={isThumbnailUploading} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-gray-100 file:text-gray-800 hover:file:bg-gray-200" />
              {isThumbnailUploading && <p className="text-sm text-gray-500 mt-2">대표 이미지 업로드 중...</p>}
            </div>
            
            <div><label htmlFor="file" className="block text-sm font-medium text-gray-700">본문 이미지 (여러 개 선택 가능)</label><input id="file" type="file" multiple onChange={handleFileChange} disabled={isUploading} className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-gray-100 file:text-gray-800 hover:file:bg-gray-200" />{isUploading && <p className="text-sm text-gray-500 mt-2">업로드 중...</p>}</div>
            
            <div>
              <div className="flex justify-between items-center">
                <label htmlFor="content" className="block text-sm font-medium text-gray-700">본문 (Markdown 지원)</label>
                <button type="button" onClick={insertSpoilerText} className="px-2 py-1 text-xs font-semibold text-white bg-gray-700 rounded-md hover:bg-gray-800">스포일러 추가</button>
              </div>
              <textarea ref={contentRef} id="content" rows={10} value={content} onChange={(e) => setContent(e.target.value)} className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500" required />
            </div>
            
            <div className="space-y-4 rounded-md border border-gray-200 p-4">
              <h3 className="text-sm font-medium text-gray-900">옵션</h3>
              <div className="relative flex items-start"><div className="flex h-6 items-center"><input id="blur-toggle" type="checkbox" checked={isBlurred} onChange={(e) => setIsBlurred(e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-gray-700 focus:ring-gray-600" /></div><div className="ml-3 text-sm leading-6"><label htmlFor="blur-toggle" className="font-medium text-gray-700">대표 이미지 흐리게</label><p className="text-gray-500">SNS 썸네일을 블러 처리합니다.</p></div></div>
              <div className="relative flex items-start"><div className="flex h-6 items-center"><input id="spoiler-toggle" type="checkbox" checked={isSpoiler} onChange={(e) => setIsSpoiler(e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-gray-700 focus:ring-gray-600" /></div><div className="ml-3 text-sm leading-6"><label htmlFor="spoiler-toggle" className="font-medium text-gray-700">본문 내용 스포일러</label><p className="text-gray-500">SNS 본문 내용을 가립니다.</p></div></div>
              <div className="relative flex items-start"><div className="flex h-6 items-center"><input id="nsfw-toggle" type="checkbox" checked={isNsfw} onChange={(e) => setIsNsfw(e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-gray-700 focus:ring-gray-600" /></div><div className="ml-3 text-sm leading-6"><label htmlFor="nsfw-toggle" className="font-medium text-gray-700">NSFW (민감한 콘텐츠)</label><p className="text-gray-500">SNS 썸네일을 완전히 가립니다.</p></div></div>
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">비밀번호 (선택)</label>
                <input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500" placeholder="게시물 보호용 비밀번호" />
              </div>
            </div>

            <button type="submit" disabled={isSubmitting || isUploading || isThumbnailUploading} className="w-full px-4 py-2 text-lg font-medium text-white bg-gray-800 rounded-md hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:bg-gray-400">{isSubmitting ? '생성 중...' : '공유 링크 생성'}</button>
          </form>

          {error && <p className="mt-4 text-sm text-center text-red-600">{error}</p>}
          {generatedLink && (<div className="mt-6 p-4 bg-gray-100 border border-gray-200 rounded-md"><p className="text-sm font-medium text-gray-800">✅ 성공! 생성된 링크:</p><a href={generatedLink} target="_blank" rel="noopener noreferrer" className="block mt-1 text-sm text-gray-900 font-semibold break-all hover:underline">{generatedLink}</a></div>)}
        </div>

        {/* --- 오른쪽: 실시간 미리보기 --- */}
        <div className="space-y-8 sticky top-8 h-fit">
          <OgPreview 
            title={title}
            tags={tags}
            content={content}
            imageUrl={thumbnailUrl}
            isBlurred={isBlurred}
            isSpoiler={isSpoiler}
            isNsfw={isNsfw}
          />
          <ContentPreview 
            content={content}
            fontClass={selectedFont}
            // ▼▼▼ 핸들러 함수를 prop으로 전달 ▼▼▼
            onImageResize={handleImageResize}
          />
        </div>
      </div>
    </main>
  );
}


============================================================
FILE: app/upload/ContentPreview.tsx
============================================================

'use client';

import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import remarkBreaks from 'remark-breaks';
import rehypeRaw from 'rehype-raw';
import type { Pluggable } from 'unified';
import { MouseEvent } from 'react';
import ResizableImage from './ResizableImage';

interface ContentPreviewProps {
  content: string;
  fontClass: string;
  onImageResize: (src: string, newWidth: number) => void;
}

export default function ContentPreview({ content, fontClass, onImageResize }: ContentPreviewProps) {
  const handleSpoilerClick = (e: MouseEvent<HTMLElement>) => {
    const target = e.target as HTMLElement;
    if (target.classList.contains('spoiler')) {
      target.classList.remove('spoiler');
      target.classList.add('spoiler-revealed');
    }
  };

  const processContentForSpoilers = (text: string) => {
    return text.replace(/블러\[(.*?)\]/g, '<span class="spoiler">$1</span>');
  };

  const processedContent = processContentForSpoilers(content);

  return (
    <div>
      <h3 className="text-lg font-semibold mb-2 text-gray-800">본문 미리보기</h3>
      <div 
        className={`prose lg:prose-lg w-full max-w-none bg-white p-6 sm:p-8 rounded-lg shadow-lg border min-h-[200px] ${fontClass}`}
        onClick={handleSpoilerClick}
      >
        {content ? (
          <ReactMarkdown 
            remarkPlugins={[remarkGfm, remarkBreaks] as Pluggable[]}
            rehypePlugins={[rehypeRaw]}
            components={{
              p: ({ node, children }) => {
                if (!node) {
                  return <p>{children}</p>;
                }
                const firstChild = node.children[0];
                if (
                  node.children.length === 1 &&
                  firstChild && 'tagName' in firstChild &&
                  firstChild.tagName === 'img'
                ) {
                  return <>{children}</>;
                }
                return <p>{children}</p>;
              },
              // ▼▼▼ src가 string 타입인지 확인하는 로직 추가 ▼▼▼
              img: ({ src, alt, width }) => {
                // src가 문자열이 아니면 렌더링하지 않음 (오류 방지)
                if (typeof src !== 'string') {
                  return null;
                }

                const currentWidth = width ? Number(width) : undefined;
                return (
                  <ResizableImage 
                    src={src} // 이제 src는 string 타입임이 보장됨
                    alt={alt || ''}
                    currentWidth={currentWidth}
                    onResize={onImageResize}
                  />
                );
              }
              // ▲▲▲ 여기까지 수정 ▲▲▲
            }}
          >
            {processedContent}
          </ReactMarkdown>
        ) : (
          <p className="text-gray-400">본문 내용이 여기에 표시됩니다.</p>
        )}
      </div>
    </div>
  );
}


============================================================
FILE: app/upload/ResizableImage.tsx
============================================================

// ▼▼▼ "use client" 지시어 추가 ▼▼▼
'use client';
// ▲▲▲ 여기까지 추가 ▲▲▲

import { useState, useRef, MouseEvent, useEffect } from 'react';

interface ResizableImageProps {
  src: string;
  alt: string;
  currentWidth?: number;
  onResize: (src: string, newWidth: number) => void;
}

export default function ResizableImage({ src, alt, currentWidth, onResize }: ResizableImageProps) {
  const imgRef = useRef<HTMLImageElement>(null);
  const [width, setWidth] = useState(currentWidth || 500); // 기본 너비 또는 기존 너비
  const [isResizing, setIsResizing] = useState(false);
  const [isSelected, setIsSelected] = useState(false);

  // 외부 클릭 감지를 위한 ref
  const containerRef = useRef<HTMLDivElement>(null);

  const handleMouseDown = (e: MouseEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsResizing(true);
  };

  const handleMouseMove = (e: MouseEvent<HTMLDivElement>) => {
    if (isResizing && imgRef.current) {
      const newWidth = e.clientX - imgRef.current.getBoundingClientRect().left;
      if (newWidth > 50 && newWidth < 800) { // 최소/최대 너비 제한
        setWidth(newWidth);
      }
    }
  };

  const handleMouseUp = () => {
    if (isResizing) {
      setIsResizing(false);
      onResize(src, Math.round(width)); // 리사이즈 완료 시 부모 컴포넌트에 알림
    }
  };
  
  // 외부 클릭 시 선택 해제
  useEffect(() => {
    const handleClickOutside = (event: globalThis.MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        setIsSelected(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);


  return (
    <div
      ref={containerRef}
      className="relative my-4 inline-block"
      style={{ width: `${width}px`, maxWidth: '100%' }}
      onMouseMove={handleMouseMove}
      onMouseUp={handleMouseUp}
      onMouseLeave={handleMouseUp}
      onClick={() => setIsSelected(true)}
    >
      {/* eslint-disable-next-line @next/next/no-img-element */}
      <img
        ref={imgRef}
        src={src}
        alt={alt}
        width={width}
        className="block h-auto rounded-lg"
        style={{ width: '100%' }}
      />
      {isSelected && (
        <>
          {/* Resize Handle */}
          <div
            className="absolute -right-1 -bottom-1 w-4 h-4 bg-blue-500 border-2 border-white rounded-full cursor-se-resize"
            onMouseDown={handleMouseDown}
          />
          {/* Outline */}
          <div className="absolute inset-0 border-2 border-blue-500 rounded-lg pointer-events-none" />
        </>
      )}
    </div>
  );
}


============================================================
FILE: app/view/[id]/PostContent.tsx
============================================================

'use client';

import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import remarkBreaks from 'remark-breaks';
import rehypeRaw from 'rehype-raw';
import type { Pluggable } from 'unified';
import { MouseEvent } from 'react';

interface Post {
  id: string;
  title: string;
  content: string;
  thumbnail_url: string;
  is_thumbnail_blurred: boolean;
  is_content_spoiler: boolean;
  font_family: string | null;
  password: string | null;
  created_at: string;
}

export default function PostContent({ post }: { post: Post }) {
  
  const handleSpoilerClick = (e: MouseEvent<HTMLElement>) => {
    const target = e.target as HTMLElement;
    if (target.classList.contains('spoiler')) {
      target.classList.remove('spoiler');
      target.classList.add('spoiler-revealed');
    }
  };

  const processContentForSpoilers = (text: string) => {
    return text.replace(/블러\[(.*?)\]/g, '<span class="spoiler">$1</span>');
  };

  const processedContent = processContentForSpoilers(post.content);

  return (
    <article 
      className="prose lg:prose-lg w-full max-w-3xl bg-white p-6 sm:p-10 rounded-lg shadow-lg"
      onClick={handleSpoilerClick}
    >
      <h1>{post.title}</h1>
      <ReactMarkdown 
        remarkPlugins={[remarkGfm, remarkBreaks] as Pluggable[]}
        rehypePlugins={[rehypeRaw]}
        components={{ 
          // ▼▼▼ 경고 해결을 위해 코드 수정 ▼▼▼
          'img': ({ ...props }) => ( // 1. 사용하지 않는 'node' 제거
            // 2. img 태그 경고를 무시하는 주석 추가
            // eslint-disable-next-line @next/next/no-img-element
            <img {...props} style={{ maxWidth: '100%', height: 'auto', borderRadius: '8px' }} alt="" /> 
          )
          // ▲▲▲ 여기까지 수정 ▲▲▲
        }}
      >
        {processedContent}
      </ReactMarkdown>
    </article>
  );
}


============================================================
FILE: app/view/[id]/PasswordProtect.tsx
============================================================

'use client';

import { useState, FormEvent } from 'react';
import PostContent from './PostContent';

// Post 타입을 page.tsx와 동일하게 정의
interface Post {
  id: string;
  title: string;
  content: string;
  thumbnail_url: string;
  is_thumbnail_blurred: boolean;
  is_content_spoiler: boolean;
  is_nsfw: boolean; // is_nsfw 추가 (타입 일관성)
  font_family: string | null;
  password: string | null;
  created_at: string;
}

export default function PasswordProtect({ post }: { post: Post }) {
  const [isVerified, setIsVerified] = useState(false);
  const [passwordInput, setPasswordInput] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/verify-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: post.id, password: passwordInput }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        setIsVerified(true);
      } else {
        setError(data.error || '인증에 실패했습니다.');
      }
    } catch (err) {
      setError('네트워크 오류가 발생했습니다.');
    } finally {
      setIsLoading(false);
    }
  };

  if (isVerified) {
    return <PostContent post={post} />;
  }

  return (
    <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold text-center text-gray-800">비밀번호 필요</h2>
      <p className="text-center text-sm text-gray-600">이 콘텐츠를 보려면 비밀번호를 입력하세요.</p>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="password-input" className="sr-only">비밀번호</label>
          <input
            id="password-input"
            type="password"
            value={passwordInput}
            onChange={(e) => setPasswordInput(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-gray-500 focus:border-gray-500"
            placeholder="비밀번호"
            required
          />
        </div>
        {error && <p className="text-sm text-red-600">{error}</p>}
        <button
          type="submit"
          disabled={isLoading}
          className="w-full px-4 py-2 font-medium text-white bg-gray-800 rounded-md hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 disabled:bg-gray-400"
        >
          {isLoading ? '확인 중...' : '확인'}
        </button>
      </form>
    </div>
  );
}


============================================================
FILE: app/api/posts/route.ts
============================================================

import { NextResponse } from 'next/server';
import { db } from '@vercel/postgres';
import { nanoid } from 'nanoid';
import bcrypt from 'bcrypt';

export async function POST(request: Request) {
  try {
    const { 
      title,
      // ▼▼▼ tags 값 수신 ▼▼▼
      tags,
      // ▲▲▲ tags 값 수신 ▲▲▲
      content, 
      thumbnailUrl, 
      isThumbnailBlurred, 
      isContentSpoiler, 
      isNsfw,
      selectedFont,
      password
    } = await request.json();

    if (!title || !content || !thumbnailUrl) {
      return NextResponse.json({ error: '제목, 내용, 대표 이미지는 필수입니다.' }, { status: 400 });
    }

    let hashedPassword = null;
    if (password && password.length > 0) {
      const saltRounds = 10;
      hashedPassword = await bcrypt.hash(password, saltRounds);
    }

    const id = nanoid();

    await db.sql`
      -- ▼▼▼ tags 컬럼 추가 ▼▼▼
      INSERT INTO posts (id, title, tags, content, thumbnail_url, is_thumbnail_blurred, is_content_spoiler, is_nsfw, font_family, password)
      VALUES (${id}, ${title}, ${tags}, ${content}, ${thumbnailUrl}, ${isThumbnailBlurred}, ${isContentSpoiler}, ${isNsfw}, ${selectedFont}, ${hashedPassword});
      -- ▲▲▲ tags 컬럼 추가 ▲▲▲
    `;

    const baseUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000';
    const generatedUrl = `${baseUrl}/view/${id}`;

    return NextResponse.json({ success: true, url: generatedUrl });

  } catch (error) {
    console.error('Create Post API Error:', error);
    return NextResponse.json({ error: '게시물 생성 중 서버에서 에러가 발생했습니다.' }, { status: 500 });
  }
}


============================================================
FILE: app/api/upload/route.ts
============================================================

import { NextResponse } from 'next/server';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { nanoid } from 'nanoid';

const s3Client = new S3Client({
  region: 'auto',
  endpoint: process.env.R2_ENDPOINT!,
  credentials: {
    accessKeyId: process.env.R2_ACCESS_KEY_ID!,
    secretAccessKey: process.env.R2_SECRET_ACCESS_KEY!,
  },
});

function getPublicUrl(filename: string): string {
  const publicUrlBase = process.env.NEXT_PUBLIC_R2_PUBLIC_URL!;
  return `${publicUrlBase.replace(/\/$/, '')}/${filename}`;
}

export async function POST(request: Request) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File | null;

    if (!file) {
      return NextResponse.json({ error: '파일이 없습니다.' }, { status: 400 });
    }

    const buffer = Buffer.from(await file.arrayBuffer());
    const uniqueId = nanoid(10); // 짧은 고유 ID
    const key = `${uniqueId}-${file.name}`;

    const command = new PutObjectCommand({
      Bucket: process.env.R2_BUCKET_NAME!,
      Key: key,
      Body: buffer,
      ContentType: file.type,
    });
    
    await s3Client.send(command);

    const publicUrl = getPublicUrl(key);

    // 이제 DB에 저장하지 않고, 업로드된 파일의 URL과 파일명만 반환합니다.
    return NextResponse.json({ success: true, url: publicUrl, filename: file.name });

  } catch (error) {
    console.error('Upload API Error:', error);
    return NextResponse.json({ error: '파일 업로드 중 서버에서 에러가 발생했습니다.' }, { status: 500 });
  }
}


============================================================
FILE: app/api/og/route.tsx
============================================================

import { ImageResponse } from 'next/og';
import { NextRequest } from 'next/server';
import { join } from 'path';
import * as fs from 'fs';
import sharp from 'sharp';

export const runtime = 'nodejs';

const fontBoldPath = join(process.cwd(), 'public', 'fonts', 'PretendardJP-Black.otf');
const fontRegularPath = join(process.cwd(), 'public', 'fonts', 'PretendardJP-Medium.otf');
const pretendardBold = fs.readFileSync(fontBoldPath);
const pretendardRegular = fs.readFileSync(fontRegularPath);

function getContrastingTextColor(r: number, g: number, b: number): string {
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  return luminance > 0.5 ? '#000000' : '#FFFFFF';
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);

    const title = searchParams.get('title') || '제목 없음';
    const artist = searchParams.get('artist'); // 원본 본문 내용 (필터링 전)
    const imageUrl = searchParams.get('imageUrl');
    const isBlurred = searchParams.get('isBlurred') === 'true';
    const isSpoiler = searchParams.get('isSpoiler') === 'true';
    const isNsfw = searchParams.get('isNsfw') === 'true';
    const tagsParam = searchParams.get('tags');
    const tags = tagsParam ? tagsParam.split(',').map(tag => tag.trim()).filter(Boolean) : [];

    let backgroundColor = '#28234D';
    let textColor = '#FFFFFF';
    let tagBackgroundColor = 'rgba(255, 255, 255, 0.15)';
    let playButtonColor = '#28234D';

    if (imageUrl) {
      try {
        const response = await fetch(imageUrl);
        const imageBuffer = await response.arrayBuffer();
        const { dominant } = await sharp(Buffer.from(imageBuffer)).stats();
        const { r, g, b } = dominant;
        
        backgroundColor = `rgb(${r}, ${g}, ${b})`;
        textColor = getContrastingTextColor(r, g, b);

        if (textColor === '#FFFFFF') {
          tagBackgroundColor = 'rgba(255, 255, 255, 0.15)';
          playButtonColor = `rgb(${r}, ${g}, ${b})`;
        } else {
          tagBackgroundColor = 'rgba(0, 0, 0, 0.1)';
          playButtonColor = `rgb(${r}, ${g}, ${b})`;
        }
      } catch (colorError) {
        console.error("Failed to extract dominant color:", colorError);
      }
    }

    // ▼▼▼ 실시간 미리보기와 동일한 텍스트 필터링 로직 추가 ▼▼▼
    const previewText = artist
      ? artist
          .replace(/!\[.*?\]\(.*?\)/g, '')   // Markdown 이미지 제거
          .replace(/<img[^>]*>/gi, '')      // HTML 이미지 제거
          .replace(/블러\[.*?\]/g, '')        // 스포일러 태그 제거
          .replace(/\n/g, ' ')              // 줄바꿈을 공백으로 변환
          .trim()
      : '';
    // ▲▲▲ 여기까지 추가 ▲▲▲

    return new ImageResponse(
      (
        <div style={{ height: '100%', width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', backgroundColor: backgroundColor, color: textColor, padding: '40px' }}>
          <div style={{ display: 'flex', width: '100%', height: '100%' }}>
            <div style={{ position: 'relative', width: 550, height: 550, display: 'flex' }}>
              {imageUrl && (
                // eslint-disable-next-line @next/next/no-img-element
                <img
                  src={imageUrl}
                  alt=""
                  width={550}
                  height={550}
                  style={{
                    borderRadius: '20px',
                    objectFit: 'cover',
                    filter: isBlurred ? 'blur(40px)' : 'none',
                  }}
                />
              )}
              {isNsfw && (
                <div style={{
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  width: '100%',
                  height: '100%',
                  backgroundColor: 'rgba(0, 0, 0, 0.6)',
                  borderRadius: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}>
                  <svg xmlns="http://www.w3.org/2000/svg" height="150" width="150" viewBox="0 0 640 512" fill="white">
                    <path d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7C559.7 341.5 584 285.4 597.8 232.2c1.1-4.4 1.1-9.1 0-13.5C580.5 164.6 539.4 96 468.6 41.2C408.4-1.9 344.7-13.5 283.5 1.7L38.8 5.1zM240 128a128 128 0 0 0-93.5 210.3L209.2 282c-10-24-8.5-52.3 5.8-74.3s38.3-36.8 63-38.2l51.9-41.5C301.7 132 272.1 128 240 128zM320 384c-35.3 0-68.7-12.1-96.6-33.9L262 311.9c13.4 10.9 30.6 17.1 48.8 17.1c52.9 0 96-43.1 96-96c0-18.2-5.2-35.4-14.2-50.2L427.2 215c15.2 21.5 24.8 47.3 24.8 74.2c0 88.4-71.6 160-160 160z"/>
                  </svg>
                </div>
              )}
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '40px', flex: 1, justifyContent: 'space-between' }}>
              <div style={{ display: 'flex', justifyContent: 'flex-end', opacity: 0.8 }}>
                <svg xmlns="http://www.w3.org/2000/svg" height="80" width="80" viewBox="0 0 576 512" fill={textColor}>
                  <path d="M305 151.1L320 171.8L335 151.1C360 116.5 400.2 96 442.9 96C516.4 96 576 155.6 576 229.1L576 231.7C576 343.9 436.1 474.2 363.1 529.9C350.7 539.3 335.5 544 320 544C304.5 544 289.2 539.4 276.9 529.9C203.9 474.2 64 343.9 64 231.7L64 229.1C64 155.6 123.6 96 197.1 96C239.8 96 280 116.5 305 151.1z"/>
                </svg>
              </div>
              <div style={{ display: 'flex', flexDirection: 'column', fontFamily: '"PretendardJP-Black"' }}>
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px', marginBottom: '20px' }}>
                  {tags.map((tag) => (
                    <div
                      key={tag}
                      style={{
                        display: 'flex',
                        padding: '6px 16px',
                        backgroundColor: tagBackgroundColor,
                        borderRadius: '9999px',
                        fontSize: '28px',
                        fontFamily: '"PretendardJP-Medium"',
                        fontWeight: 400,
                        lineHeight: 1.2,
                      }}
                    >
                      {tag}
                    </div>
                  ))}
                </div>
                <div style={{ fontSize: '60px', fontWeight: 'bold', letterSpacing: '-0.02em' }}>
                  {title}
                </div>
                {/* ▼▼▼ artist 대신 정제된 previewText를 사용 ▼▼▼ */}
                {previewText && (
                  <div style={{
                    fontSize: '40px',
                    marginTop: '10px',
                    opacity: 0.7,
                    wordBreak: 'break-all',
                    lineHeight: 1.3,
                    fontFamily: '"PretendardJP-Medium"',
                    fontWeight: 400,
                  }}>
                    {isSpoiler ? '내용이 가려졌습니다.' : previewText}
                  </div>
                )}
              </div>
              <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100px', height: '100px', backgroundColor: textColor, borderRadius: '50%' }}>
                  <svg width="50" height="50" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M8 5.13965V18.8604C8 19.56 8.66274 20.0168 9.30852 19.642L20.6915 12.7816C21.3373 12.4078 21.3373 11.5922 20.6915 11.2184L9.30852 4.35795C8.66274 3.98317 8 4.44004 8 5.13965Z" fill={playButtonColor}/>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>
      ),
      { width: 1200, height: 630, fonts: [{ name: 'PretendardJP-Black', data: pretendardBold, style: 'normal', weight: 800 }, { name: 'PretendardJP-Medium', data: pretendardRegular, style: 'normal', weight: 400 }] },
    );
  } catch (e: unknown) {
    if (e instanceof Error) console.error(`OG Image generation failed: ${e.message}`);
    else console.error('An unknown error occurred during OG Image generation');
    return new Response(`Failed to generate the image`, { status: 500 });
  }
}


============================================================
FILE: app/api/verify-password/route.ts
============================================================

import { NextResponse } from 'next/server';
import { db } from '@vercel/postgres';
import bcrypt from 'bcrypt';

export async function POST(request: Request) {
  try {
    const { id, password } = await request.json();

    if (!id || !password) {
      return NextResponse.json({ error: 'ID와 비밀번호를 모두 입력해야 합니다.' }, { status: 400 });
    }

    const { rows } = await db.sql`SELECT password FROM posts WHERE id = ${id} LIMIT 1;`;

    if (rows.length === 0) {
      return NextResponse.json({ error: '게시물을 찾을 수 없습니다.' }, { status: 404 });
    }

    const hashedPassword = rows[0].password;
    if (!hashedPassword) {
        // DB에 비밀번호가 없는 경우 (오류 상황)
        return NextResponse.json({ error: '이 게시물에는 비밀번호가 설정되어 있지 않습니다.' }, { status: 400 });
    }

    const isMatch = await bcrypt.compare(password, hashedPassword);

    if (isMatch) {
      return NextResponse.json({ success: true });
    } else {
      return NextResponse.json({ success: false, error: '비밀번호가 일치하지 않습니다.' }, { status: 401 });
    }

  } catch (error) {
    console.error('Verify Password API Error:', error);
    return NextResponse.json({ error: '비밀번호 확인 중 서버 에러가 발생했습니다.' }, { status: 500 });
  }
}

--- END OF FILE merged_code_context.txt ---
